# https://github.com/gretel/dotfiles
# https://github.com/zimbatm/direnv

set -e -b

set_log_format() {
  f=" [$(user_rel_path "$1")] %s"
  export DIRENV_LOG_FORMAT="$f"
}
set_log_format "$1"

use_python() {
  local python_version="$1"
  check_string "$python_version"
  export PYENV_VERSION="$python_version"

  local pyenv_root="$HOME/.pyenv"
  check_path "$pyenv_root"
  export PYENV_ROOT="$pyenv_root"

  local python_shims="$HOME/.pyenv/shims"
  PATH_add "$python_shims"
  local python_venv_shims="$HOME/.pyenv/plugins/pyenv-virtualenv/shims"
  PATH_add "$python_venv_shims"
  
  local python_dir="$HOME/.pyenv/versions/$python_version"
  check_path "$python_dir"

  local python_bin_dir="$python_dir/bin"
  check_exec "$python_bin_dir/python"
  PATH_add "$python_bin_dir"

  path_add MANPATH "$python_dir/share/man"

  local python_rc_file="$HOME/.python/pythonrc.py"
  if test -f "$python_rc_file"; then
    export PYTHONSTARTUP="$python_rc_file"
  fi
  export PYTHON_HISTORY_FILE="$HOME/.python_history"
  if ! test -f "$PYTHON_HISTORY_FILE"; then
    touch "$PYTHON_HISTORY_FILE"
  fi
  export PIP_DOWNLOAD_CACHE="$HOME/.cache/pip"
  if ! test -d "$PIP_DOWNLOAD_CACHE"; then
    mkdir -p "$PIP_DOWNLOAD_CACHE"
  fi
  export PYENV_VIRTUALENV_CACHE_PATH="$HOME/.cache/pyenv"
  if ! test -d "$PYENV_VIRTUALENV_CACHE_PATH"; then
    mkdir -p "$PYENV_VIRTUALENV_CACHE_PATH"
  fi

  # export PIP_REQUIRE_VIRTUALENV="True"
  # export PYENV_DEBUG="True"
  # export PYENV_VIRTUALENV_DISABLE_PROMPT="True"
  export VIRTUALENV_DISTRIBUTE="True"
}

use_pyenv() {
  local pyenv_version="$1"
  check_string "$pyenv_version"
  export PYENV_VERSION="$pyenv_version"

  log_status "$(pyenv version)"
}

use_ruby() {
  local ruby_ver="$1"
  check_string "$ruby_ver"

  local ruby_dir="$HOME/.rubies/ruby-$ruby_ver"
  check_path "$ruby_dir"
  export RUBY_HOME="$ruby_dir"

  local ruby_dir_bin="$HOME/.rubies/ruby-$ruby_ver/bin"
  check_exec "$ruby_dir_bin/ruby"
  PATH_add "$ruby_dir_bin"

  local gem_dir="$HOME/.gem/ruby/$ruby_ver"
  check_path "$gem_dir"
  export GEM_HOME="$gem_dir" GEM_PATH="$gem_dir"

  local gem_dir_bin="$HOME/.rubies/ruby-$ruby_ver/bin"
  PATH_add "$gem_dir_bin"

  path_add MANPATH "$ruby_dir/share/man"
}

use_bundler() {
  local bundler_dir="$1"
  check_string "$bundler_dir"; check_path "$bundler_dir"

  local bundler_bin_dir="$bundler_dir/bin"
  check_exec "$bundler_bin_dir/bundler"
  export BUNDLE_BIN="$bundler_bin_dir"
  PATH_add "$bundler_bin_dir"
}

 use_go() {
  local go_dir="$1"
  check_string "$go_dir"

  local go_path="$go_dir/.go"
  check_path "$go_path"
  export GOPATH="$go_path"

  local go_path_bin="$go_dir/.go/bin"
  PATH_add "$go_path_bin"

  local go_bin_dir="/usr/local/opt/go/libexec/bin"
  check_path "$go_bin_dir"; check_exec "$go_bin_dir/go"
  PATH_add "$go_bin_dir"
}

use_homebrew() {
  local hb_path="$1"
  check_string "$hb_path"; check_path "$hb_path"
  PATH_add "$hb_path/bin"
  export HOMEBREW_PATH="$hb_path"

  local hb_sbin="$hb_path/sbin"
  if test -d "$hb_sbin"; then
    PATH_add "$hb_sbin"
  fi
}

use_nodejs() {
  local node_path="$1"
  check_string "$node_path"; check_path "$node_path"

  export NODE_HOME="$node_path"
  export NODE_PATH="$node_path/lib/node_modules"
}

use_ansible() {
  local ansible_path="$1"
  check_path "$ansible_path"

  export ANSIBLE_HOME="$ansible_path"
  source "$ansible_path/hacking/env-setup" > /dev/null
}
 
check_string() {
  if test -z "$1"; then
    echo "argument is required, aborting."; exit 1
  fi
}

check_path() {
  if ! test -d "$1"; then
    echo "invalid path '$1', aborting."; exit 2
  fi
}

check_exec() {
  if ! test -x "$1"; then
    echo "file '$1' is not executable, aborting."; exit 3
  fi
}

# figures the current working directory without relying on PWD (which will change when direnv is done)
get_cwd() {
  p="$(expand_path "$1")"
  # http://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash#comment14090830_1403489
  t="${p%${p##*/}}"
  echo "${t%/}"
}
